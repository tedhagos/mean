<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc?>
<?asciidoc-numbered?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>Programming using the MEAN stack</title>
<date>2016-11-02</date>
</info>
<chapter xml:id="_preface">
<title>Preface</title>
<variablelist>
<varlistentry>
<term>Chapter 1</term>
<listitem>
<simpara>A Javascript refresher. Ideally, you will approach the book with book with some Javascript experience</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Chapter 2</term>
<listitem>
<simpara>== Introduction</simpara>
</listitem>
</varlistentry>
</variablelist>
</chapter>
<chapter xml:id="_installation">
<title>Installation</title>

</chapter>
<chapter xml:id="_working_with_files">
<title>Working with files</title>
<programlisting language="javascript" linenumbering="unnumbered"></programlisting>
</chapter>
<chapter xml:id="_file_io">
<title>File IO</title>
<formalpara xml:id="filereadexample.js">
<title>FileReadExample.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const fs = require('fs'); // &lt;1&gt; const filename = 'index.html';

fs.readFile(filename,'utf-8', function(err, data){ <co xml:id="CO1-1"/><co xml:id="CO1-2"/><co xml:id="CO1-3"/>
  if(err) { <co xml:id="CO1-4"/>
    console.log(err.message);
  }
  else {
    console.log(data); <co xml:id="CO1-5"/>
  }
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="">
<para>Import the <literal>fs</literal> library into our app. Anything that requires
file io is contained in this module</para>
</callout>
<callout arearefs="CO1-1">
<para>First parameter of <literal>readFile()</literal> is the filename to read. You can
check for file existence first if you prefer using <literal>fs.lstat</literal> or
<literal>fs.access</literal>, but if you generally would just like to read the file,
just call <literal>readFile</literal> right away. If the file does not exist, it will
throw an error just the same</para>
</callout>
<callout arearefs="CO1-2">
<para>Second parameter of <literal>readFile</literal> is the encoding, we simply set it
to utf-8</para>
</callout>
<callout arearefs="CO1-3">
<para>Third parameter is a callback function. When <literal>readFile</literal> eventually
finishes actually reading the file, this function will be called. The
node runtime will pass to our function two things (a) an error object,
should an error occur and (b) if readFile went ahead without problems,
all of the contents of <literal>filename</literal> would have been loaded to the <literal>data</literal>
variable</para>
</callout>
<callout arearefs="CO1-4">
<para>If the call fails, <literal>err</literal> won&#8217;t be null. Lots of things can cause
the <literal>readFile()</literal> to fail e.g. if the file is not there, the OS ran out
of file handles etc. If err isn&#8217;t null, the <literal>if</literal> block will find it
<emphasis>truthy</emphasis> &lt;6&gt; If the call succeeds, <literal>err</literal> will be null (falsy) and the
contents of the file would have been loaded into the second parameter
of our callback function</para>
</callout>
</calloutlist>
<simpara>If you ran the code listing above, you would seen  an error message
because the file <emphasis>index.html</emphasis> does not exist yet. Create the html file
and save it on the same folder where <emphasis>FileReadExample.js</emphasis> is located.</simpara>
<formalpara xml:id="index.html">
<title>index.html</title>
<para>
<programlisting language="html" linenumbering="unnumbered">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;h1&gt;Hello World&lt;/h1&gt;
&lt;/html&gt;</programlisting>
</para>
</formalpara>
<simpara>Run the code sample again. This time, the contents of <emphasis>index.html</emphasis>
will be echoed to the screen.</simpara>
<section xml:id="_reading_a_file_from_a_web_app">
<title>Reading a File from a Web App</title>
<simpara>Let&#8217;s use the file reading technique we learned in the last section
and apply it in a simple web app. The basic idea is as follows (1) The
user navigates to the root document or the home page (2) we will call
a function that will read an html file and (3) we will write the
contents of the html file into the <literal>response</literal> stream.</simpara>
<formalpara xml:id="app.js">
<title>app.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const http = require('http');
const fs = require('fs');

const port = process.env.PORT || 3000;

http.createServer(function(req, res){ var url = req.url.toUpperCase();
  switch(url) {
    case "/": <co xml:id="CO2-1"/>
      openFile('index.html', res); <co xml:id="CO2-2"/>
      break;
    case "/ABOUT":
      // were in the about page
      break;
    default: <co xml:id="CO2-3"/>
      // Good place to write a 404 response
    }
}).listen(port);

// HELPER FUNCTIONS -----------------------------

function openFile(filename, res) {
  fs.readFile(filename, 'utf-8', function(err, data){
    if(err){
      res.writeHead(400, {'Content-Type':'text/html'});
      console.log(err.message);
      res.write("Error encountered");
    }
    else {
      res.writeHead(200,{'Content-Type':'text/html'});
      res.write(data); res.end();
    }
  });
}</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO2-1">
<para>The user has went to the home page, this is the docroot of the our
web app
&lt;2&gt;
&lt;3&gt;</para>
</callout>
</calloutlist>
</section>
<section xml:id="_synchronous_file_operation">
<title>Synchronous File Operation</title>

</section>
<section xml:id="_dealing_with_asynchrony">
<title>Dealing with Asynchrony</title>

</section>
</chapter>
</book>